{"version":3,"sources":["Components/Filters/filter.industry.component.jsx","Components/Cards/cards.component.jsx","Components/Listing/listing.component.jsx","App.js","serviceWorker.js","index.js"],"names":["IndustryFilter","industry","handleChange","className","htmlFor","value","onChange","name","Card","key","title","description","image","link","cardStyle","backgroundImage","href","target","rel","style","Listing","props","data","map","card","i","rendered","acf","App","state","type","isLoaded","handleTypeChange","bind","handleIndustryChange","event","this","setState","fetch","then","response","json","catch","err","console","log","filteredData","slice","filter","item","includes","length","count","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.199791d5.chunk.js","sourcesContent":["import React from 'react';\nimport './filters.styles.scss';\n\nexport const IndustryFilter = ({industry, handleChange}) => (\n    <div className=\"fiter-select\">\n        <label htmlFor=\"industry-filter\">Industry</label>\n        <select value={industry} onChange={handleChange} name=\"industry-filter\">\n            <option value=\"\">All</option>\n            <option value=\"Destinations\">Destinations</option>\n            <option value=\"Attractions & Museums\">Attractions & Museums</option>\n        </select>\n    </div>\n)","import React from 'react';\n\nimport './cards.styles.scss';\n\nfunction Card({key, title, description, image, industry, link}) {\n    \n    const cardStyle = {\n        backgroundImage: 'url(' + image + ')',\n    };\n    return (\n        <a href={link} target=\"_blank\" rel=\"noopener noreferrer\" className=\"card\" key={key}>\n            <div className=\"img-wrapper\" style={cardStyle}>\n            </div>\n            <div className=\"content-wrapper\">\n                <span>{industry}</span>\n                <h3>{title}</h3>\n                <p>{description}</p>\n            </div>\n        </a>\n    )\n}\n\nexport default Card;","import React from 'react';\nimport Card from '../Cards/cards.component';\n\nimport './listing.styles.scss';\n\nexport const Listing = props => {\n\treturn (\n\t\t<section className=\"listing-wrapper\">\n\t\t\t<div className=\"container\">\n\t\t\t{\n\t\t\t\tprops.data.map((card, i) => (\n\t\t\t\t\t<Card\n\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\ttitle={card.title.rendered}\n\t\t\t\t\t\tdescription={card.acf.description}\n\t\t\t\t\t\timage={card.acf.image}\n\t\t\t\t\t\tindustry={card.acf.industry}\n\t\t\t\t\t\tlink={card.acf.link}\n\t\t\t\t\t/>\n\t\t\t\t))\n\t\t\t}\n\t\t\t</div>\n\t\t</section>\n\t)\n}","import React, { Component } from 'react';\nimport { IndustryFilter } from './Components/Filters/filter.industry.component';\nimport { TypeFilter } from './Components/Filters/filter.type.component';\nimport { Listing } from './Components/Listing/listing.component';\n\nimport './App.scss';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      data: [],\n      type: '',\n      industry: '',\n      isLoaded: false\n    }\n\n    this.handleTypeChange = this.handleTypeChange.bind(this);\n    this.handleIndustryChange = this.handleIndustryChange.bind(this);\n  }\n\n  handleTypeChange(event) {\n    this.setState({type: event.target.value});\n  }\n\n  handleIndustryChange(event) {\n    this.setState({industry: event.target.value});\n  }\n\n  componentDidMount() {\n\t\tfetch('https://crowdriffstg.wpengine.com/wp-json/wp/v2/showcase')\n\t\t\t.then(response => response.json())\n\t\t\t.then(data => \n\t\t\t\tthis.setState({\n\t\t\t\t\tdata: data,\n\t\t\t\t\tisLoaded: true\n\t\t\t\t})\n\t\t\t)\n\t\t\t.catch(err => console.log(err))\n\t}\n\n  render() {\n    const { data, type, industry, isLoaded } = this.state;\n\n    let filteredData = data.slice();\n    if (type) {\n      filteredData = filteredData.filter(item => item.acf.type.includes(type))\n    }\n    if (industry) {\n      filteredData = filteredData.filter(item => item.acf.industry.includes(industry))\n    }\n\n    console.log(filteredData)\n\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <h1>Industry Showcase</h1>\n          <div className=\"filters\">\n            {/* <TypeFilter\n              value={type}\n              handleChange={this.handleTypeChange}\n            /> */}\n            <IndustryFilter\n              value={industry}\n              handleChange={this.handleIndustryChange}\n            />\n          </div>\n        </div>\n        { filteredData.length > 0 &&\n          <Listing \n            data={filteredData}\n            count={filteredData.length}\n          />\n        }\n        { filteredData.length == 0 && isLoaded &&\n          <section className=\"no-results\">\n            <div className=\"container\">\n              <h2>Sorry, there are no matches. Please try again.</h2>\n            </div>\n          </section>\n        }\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}