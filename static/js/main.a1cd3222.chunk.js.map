{"version":3,"sources":["Components/Cards/cards.component.jsx","Components/Listing/listing.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","key","title","description","image","industry","link","href","target","rel","className","src","alt","Listing","state","data","fetch","then","response","json","setState","console","log","this","map","card","i","rendered","acf","card_image","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"6TAiBeA,G,MAbF,SAAC,GAAD,IAAEC,EAAF,EAAEA,IAAKC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,YAAaC,EAA3B,EAA2BA,MAAOC,EAAlC,EAAkCA,SAAUC,EAA5C,EAA4CA,KAA5C,OACT,uBAAGC,KAAMD,EAAME,OAAO,SAASC,IAAI,sBAAsBC,UAAU,OAAOT,IAAKA,GAC3E,yBAAKS,UAAU,eACX,yBAAKC,IAAKP,EAAOQ,IAAKV,KAE1B,yBAAKQ,UAAU,mBACX,8BAAOL,GACP,4BAAKH,GACL,2BAAIC,OC+BDU,G,MAtCf,kDACE,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXC,KAAM,IAJI,EADhB,gEASuB,IAAD,OACrBC,MAAM,gDACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAF,GAAI,OAAI,EAAKK,SAAS,CAACL,KAAMA,SAZpC,+BAiBI,OADAM,QAAQC,IAAIC,KAAKT,OAEf,6BAASJ,UAAU,mBACjB,yBAAKA,UAAU,aAEXa,KAAKT,MAAMC,KAAKS,KAAI,SAACC,EAAMC,GAAP,OAChB,kBAAC,EAAD,CACIzB,IAAKyB,EACLxB,MAAOuB,EAAKvB,MAAMyB,SAClBxB,YAAasB,EAAKG,IAAIzB,YACtBC,MAAOqB,EAAKG,IAAIC,WAC/BxB,SAAUoB,EAAKG,IAAIvB,SACnBC,KAAMmB,EAAKG,IAAItB,gBA5BpB,GAA6BwB,c,MCWdC,MAXf,WACE,OACE,yBAAKrB,UAAU,OACb,yBAAKA,UAAU,aACb,kDAEF,kBAAC,EAAD,QCCcsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.a1cd3222.chunk.js","sourcesContent":["import React from 'react';\n\nimport './cards.styles.scss';\n\nconst Card = ({key, title, description, image, industry, link}) => (\n    <a href={link} target=\"_blank\" rel=\"noopener noreferrer\" className=\"card\" key={key}>\n        <div className=\"img-wrapper\">\n            <img src={image} alt={title}/>\n        </div>\n        <div className=\"content-wrapper\">\n            <span>{industry}</span>\n            <h3>{title}</h3>\n            <p>{description}</p>\n        </div>\n    </a>\n)\n\nexport default Card;","import React, { Component } from 'react';\nimport Card from '../Cards/cards.component';\n\nimport './listing.styles.scss';\n\nexport class Listing extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      data: []\n    }\n  }\n\n  componentDidMount() {\n\tfetch('https://crowdriff.com/wp-json/wp/v2/showcase')\n\t.then(response => response.json())\n\t.then(data => this.setState({data: data}))\n  }\n\n  render() {\n    console.log(this.state);\n    return (\n      <section className=\"listing-wrapper\">\n        <div className=\"container\">\n        {\n            this.state.data.map((card, i) => (\n                <Card\n                    key={i}\n                    title={card.title.rendered}\n                    description={card.acf.description}\n                    image={card.acf.card_image}\n\t\t\t\t\tindustry={card.acf.industry}\n\t\t\t\t\tlink={card.acf.link}\n                />\n            ))\n        }\n        </div>\n      </section>\n    )\n  }\n}\n\nexport default Listing;","import React from 'react';\nimport Listing from './Components/Listing/listing.component';\n\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <h1>Industry Showcase</h1>\n      </div>\n      <Listing />\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}